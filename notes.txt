// using or working with arrays and objects in state requires special care because of one simple rule
// react will onlu update state if a new object/array is passed to setState
// note - state can only hold any kind of javascript value including objects.
// but you shouldnt change objects that you hold in the react state direclty.
//  instead when to update an object you need to create a new one (or make a copy of an exisitng one) and then \
// set state to ue that copy.

// consider this example of a stateful component.
 function Counter (){
  const [count,setCount]=useState (0)
  function handleClick(){
    setCount((count)=> count + 1)
  }
  return <button onClick={handleClick}>{count}</button>
 }

//  consider the following 
function Counter(){
  const [count, setCount]= useState({x: 0});
  function handleClick(){
    // increament the count.
    count.x++;
    setCount((count))
  }
  return <button onClick={handleClick}>{count.x}</button>
}

// if we are running this example code, youll see that the component doesnt actually render with a new value.
// this is because we're actually not providing a new value when we are calling setCount.
// setting state with the same value will not cause React to render our componenet.
// even though we have mutated the valuecount object, the count object is still the same object in memory.

//  the following is how you create a new object sotre the originamobject insideit and mutate the object inside the new object 

const count={x: 0}
const alsoCount= count;
console.log(alsoCount === count);
 count.x++;
  console.log(count.x === alsoCount.x);


// this is how it is done to ensure that state is not passed the same value and that the component is rendered.
function Counter (){
  const[count, setCount]=useState({x:0})
  function handleClick(){
    setCount({x : count.x + 1})
  }
}
//  in the example above we are updating state by creaitn a new object witht he increament value and setting state with that new object.
// this rule must be followed when using arrays.

// ADDING ELEMENTS TO ARRAYS IN STATE.
// when we need to represent a list of data in our UI, it is often a good idea to have the data stores in and array.
// build a component that does the following
// - shows a button to generate a new spicy food.
// - when the button is clicked, adds the new generated food to a list.

REMOVING ELEMENTS FROM ARRAY IN STATE.
// to remove an elejment from an array 
// on of the way to dothis is to use an element called .filter method
//below is how you can use it 

we basically use the .filter method. .filter()
function handleLiClick(id) {
  const newFoodArray = foods.filter((food) => food.id !== id);
  setFoods(newFoodArray);
}\


UPDATING ELEMENTS IN ARRAY IN STATE.
we have seen to add and to remove elements from arrays but what about 
updating.
 lets update put click feature so that when a user clicks on a food, that foods heat level is increased by 1
 - in the handleLiClick functionwe need to figure out a way y=to update our array in state and increament the heat level only for the food that was clicked
 - one approach we can take to updating items in arrays involes wing hte .map method.
 - calling .map will return a new arrary with the same length as our original array, with some transformations applied to the elements in the array.
-here is an example

WORKING WITH MULTIPLE STATE VARIABLES 
- Sometimes a component needs variable tp represent multipleui states.
to give na example, lets add a feature to our SpicyFoodList component that lets the sued filter thelist to only show food fomr a certain cuisine.
